################################################################################
# Licensed to the OpenAirInterface (OAI) Software Alliance under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The OpenAirInterface Software Alliance licenses this file to You under
# the OAI Public License, Version 1.1  (the "License"); you may not use this file
# except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.openairinterface.org/?page_id=698
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#-------------------------------------------------------------------------------
# For more information about the OpenAirInterface (OAI) Software Alliance:
#      contact@openairinterface.org
################################################################################

AMF =
{
  INSTANCE_ID = {{ instance }};            # 0 is the default
  PID_DIRECTORY = "{{ pid_directory }}";   # /var/run is the default

  AMF_NAME = "{{ amf_name }}";

  RELATIVE_CAPACITY = 30;
  # Display statistics about whole system (in seconds)
  STATISTICS_TIMER_INTERVAL = 20;

  CORE_CONFIGURATION:
  {
    EMERGENCY_SUPPORT = "false";
  };

  GUAMI:
  {
    MCC = "{{ guami_mcc }}"; MNC = "{{ guami_mnc }}"; RegionID = "{{ guami_region_id }}"; AMFSetID = "{{ guami_amf_set_id }}"; AMFPointer = "1"
  }

  SERVED_GUAMI_LIST = (
    {MCC = "{{ served_guami_0_mcc }}"; MNC = "{{ served_guami_0_mnc }}"; RegionID = "{{ served_guami_0_region_id }}"; AMFSetID = "{{ served_guami_0_amf_set_id }}"; AMFPointer = "0"}, #48bits <MCC><MNC><RegionID><AMFSetID><AMFPointer>
    {MCC = "{{ served_guami_1_mcc }}"; MNC = "{{ served_guami_1_mnc }}"; RegionID = "{{ served_guami_1_region_id }}"; AMFSetID = "{{ served_guami_1_amf_set_id }}"; AMFPointer = "1"}  #48bits <MCC><MNC><RegionID><AMFSetID><AMFPointer>
  );

  PLMN_SUPPORT_LIST = (
  {
    MCC = "{{ plmn_0_support_mcc }}"; MNC = "{{ plmn_0_support_mnc }}"; TAC = {{ plmn_0_support_tac }};
    SLICE_SUPPORT_LIST = (
      {SST = "{{ plmn_0_slice_0_sst }}"; SD = "{{ plmn_0_slice_0_sd }}"},
      {SST = "{{ plmn_0_slice_1_sst }}"; SD = "{{ plmn_0_slice_1_sd }}"},
      {SST = "{{ plmn_0_slice_2_sst }}"; SD = "{{ plmn_0_slice_2_sd }}"}
     )
  }
  );

  INTERFACES:
  {
    # AMF binded interface for N1/N2 interface (NGAP)
    NGAP_AMF:
    {
      INTERFACE_NAME = "{{ ngap_amf_interface_name }}";
      IPV4_ADDRESS   = "read";
      PORT           = {{ ngap_amf_interface_port }};
      PPID           = 60;
    };

    # AMF binded interface for SBI (N11 (SMF)/N12 (AUSF), etc.)
    N11:
    {
      INTERFACE_NAME = "{{ n11_amf_interface_name }}";
      IPV4_ADDRESS   = "read";
      PORT           = {{ n11_amf_interface_port }};
      API_VERSION    = "{{ n11_amf_api_version }}";
      HTTP2_PORT     = {{ n11_amf_interface_http2_port }};

      SMF_INSTANCES_POOL = (
        {SMF_INSTANCE_ID = {{ smf_0_instance_id }}; IPV4_ADDRESS = "{{ smf_0_ipv4_address }}"; PORT = "{{ smf_0_port }}"; HTTP2_PORT = {{ smf_0_http2_port }}, VERSION = "{{ smf_0_api_version }}"; FQDN = "{{ smf_0_fqdn }}", SELECTED = "true"},
        {SMF_INSTANCE_ID = {{ smf_1_instance_id }}; IPV4_ADDRESS = "{{ smf_1_ipv4_address }}"; PORT = "{{ smf_1_port }}"; HTTP2_PORT = {{ smf_1_http2_port }}, VERSION = "{{ smf_1_api_version }}"; FQDN = "{{ smf_1_fqdn }}", SELECTED = "false"}
      );
    };

    NRF :
    {
      IPV4_ADDRESS = "{{ nrf_ipv4_address }}";
      PORT         = {{ nrf_port }};            # Default: 80
      API_VERSION  = "{{ nrf_api_version }}";
      FQDN         = "{{ nrf_fqdn }}"
    };

    AUSF :
    {
      IPV4_ADDRESS = "{{ ausf_ipv4_address }}";
      PORT         = {{ ausf_port }};            # Default: 80
      API_VERSION  = "{{ ausf_api_version }}";
      FQDN         = "{{ ausf_fqdn }}"
    };

    UDM :
    {
      IPV4_ADDRESS = "{{ udm_ipv4_address }}";
      PORT         = {{ udm_port }};             # Default: 80
      API_VERSION  = "{{ udm_api_version }}";
      FQDN         = "{{ udm_fqdn }}";
    };

    NSSF :
    {
      IPV4_ADDRESS = "{{ nssf_ipv4_address }}";
      PORT         = {{ nssf_port }};            # Default: 80
      API_VERSION  = "{{ nssf_api_version }}";
      FQDN         = "{{ nssf_fqdn }}"
    };
  };

  SUPPORT_FEATURES:
  {
     # STRING, {"yes", "no"},
     NF_REGISTRATION = "{{ nf_registration }}";  # Set to yes if AMF resgisters to an NRF
     NRF_SELECTION   = "{{ nrf_selection }}";    # Set to yes to enable NRF discovery and selection
     EXTERNAL_NRF    = "{{ external_nrf }}";     # Set to yes if AMF works with an external NRF
     SMF_SELECTION   = "{{ smf_selection }}";    # Set to yes to enable SMF discovery and selection
     EXTERNAL_AUSF   = "{{ external_ausf }}";    # Set to yes if AMF works with an external AUSF
     EXTERNAL_UDM    = "{{ external_udm }}";     # Set to yes if AMF works with an external UDM
     EXTERNAL_NSSF   = "{{ external_nssf }}";    # Set to yes if AMF works with an external NSSF
     USE_FQDN_DNS    = "{{ use_fqdn_dns }}";     # Set to yes if AMF relies on a DNS to resolve NRF/SMF/UDM/AUSF's FQDN
     USE_HTTP2       = "{{ use_http2 }}";        # Set to yes to enable HTTP2 for AMF server
}

  AUTHENTICATION:
  {
    ## MySQL mandatory options
    MYSQL_server = "{{ mysql_server }}"; # MySQL Server address
    MYSQL_user   = "{{ mysql_user }}";   # Database server login
    MYSQL_pass   = "{{ mysql_password }}";   # Database server password
    MYSQL_db     = "{{ mysql_database }}";     # Your database name
    RANDOM = "true";
  };

  NAS:
  {
    ORDERED_SUPPORTED_INTEGRITY_ALGORITHM_LIST = {{ integrity_algorithm_list }};  #Default [ "NIA0" , "NIA1" , "NIA2" ];
    ORDERED_SUPPORTED_CIPHERING_ALGORITHM_LIST = {{ cyphering_algorithm_list }}; #Default [ "NEA0" , "NEA1" , "NEA2" ];
  };
};

MODULES =
{
  NGAP_MESSAGE = (
    {MSG_NAME = "NGSetupRequest"; ProcedureCode = 21; TypeOfMessage = "initialMessage"}
  );
};
